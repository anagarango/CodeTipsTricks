import Head from 'next/head'
import { useRouter } from 'next/router'
import { prisma } from '@/server/database/client'
import NavBar from '@/components/navbar'
import { useState } from 'react'
import { signIn, signOut } from "next-auth/react"
import RegisterForm from '@/components/registerform'
import { useSession } from "next-auth/react"
import PostPreview from '@/components/postPreview'
import axios from 'axios'

export default function Home({posts}) {
  const r = useRouter()
  const [form, setForm] = useState(false)
  const handleSignInWithGitHub = () => signIn("github")
  const {data:session} = useSession()
  const [categoryChosen, setCategoryChosen] = useState("All")
  const topicCategories = ["All", "Front-End Development", "Back-End Development", "AI / Machine Learning"]
  
  const handleCreatePost = () => {
    if(!session){
      setForm("signIn")
    } else {
      r.push("/submit")
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar onClickSignIn={()=>setForm("signIn")} onClickSignOut={()=>setForm("signOut")} />
      <main>
        <div onClick={handleCreatePost} className='w-full text-center mt-5 rounded-[12px] text-[20px] text-[#348F8A] py-2 bg-transparent font-bold border-solid border-2 border-[#348F8A] hover:bg-[#348F8A] hover:text-white duration-300'>Create A Post</div>
        <div className='flex justify-between mt-5 mb-16'>
          {topicCategories.map((o,i) => (
            <button key={i} onClick={()=>setCategoryChosen(o)} className={categoryChosen == o ? "p-3 rounded-[12px] bg-[#348F8A] font-bold border-solid border-2 border-[#348F8A] hover:bg-[#348F8A] hover:text-white duration-300" : "p-3 rounded-[12px] font-bold border-solid border-2 border-[#348F8A] hover:bg-[#348F8A] hover:text-white duration-300"}>{o}</button>
          ))}
        </div>
        {posts.map((o, index) => {
          if(categoryChosen == o.category){
            const event = new Date(o.createdAt)
            const options = {hour: "numeric", minute: "numeric", year: 'numeric', month: 'long', day: 'numeric' };
            const date = event.toLocaleString('en-GB', options)

            const [updatedLikes, setUpdatedLikes] = useState(o.totalLikes)
            const handleLike = async (id) => {
              const res = await axios.put(`/api/posts/${id}/likes`)
              console.log(res)
          
              setUpdatedLikes(res.data.totalLikes)
            }

            return(
              <PostPreview keyId={index} onClick={()=>{r.push(`/post/${o.id}`)}} profileImage={o.user.image} profileName={o.user.name} postCategory={o.category} date={date} postTitle={o.title} postContent={o.content} heartLikes={updatedLikes} addHeart={()=>handleLike(o.id)} commentLength={o.comments.length} />
            )
          } else if(categoryChosen == "All") {
            const event = new Date(o.createdAt)
            const options = {hour: "numeric", minute: "numeric", year: 'numeric', month: 'long', day: 'numeric' };
            const date = event.toLocaleString('en-GB', options)

            const [updatedLikes, setUpdatedLikes] = useState(o.totalLikes)
            const handleLike = async (id) => {
              const res = await axios.put(`/api/posts/${id}/likes`)
              console.log(res)
          
              setUpdatedLikes(res.data.totalLikes)
            }

            return(
                <PostPreview keyId={index} onClick={()=>{r.push(`/post/${o.id}`)}} profileImage={o.user.image} profileName={o.user.name} postCategory={o.category} date={date} postTitle={o.title} postContent={o.content} heartLikes={updatedLikes} addHeart={()=>handleLike(o.id)} commentLength={o.comments.length} />
            )
          }
        })}
          {form == "signIn" && <RegisterForm githubOnClick={handleSignInWithGitHub} closeOnClick={()=>setForm(false)}></RegisterForm>}
          {form == "signOut" && signOut()}
      </main>
    </>
  )
}

export async function getServerSideProps(){
  const posts = await prisma.post.findMany({
    orderBy: {
      createdAt: "desc"
    },
    include: {
      user: true,
      comments: true
    }
  })

  return{
    props:{
      posts: JSON.parse(JSON.stringify(posts))
    }
  }
}