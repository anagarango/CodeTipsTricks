import { useRouter } from "next/router";
import Head from 'next/head'
import { useEffect, useState } from "react";
import NavBar from '@/components/navbar'
import axios from "axios";
import { authOptions } from '../../api/auth/[...nextauth]'
import { getServerSession } from "next-auth/next"
import { prisma } from "../../../server/database/client"
import PostPreview from "@/components/postPreview";
import EditingPost from "@/components/editingPost";
import Comment from "@/components/comment";

export default function Post({data, comments, prismaAuth}){
    const r = useRouter()
    const event = new Date(data[0].createdAt)
    const postUserDetails = data[0].user
    const sessionUserDetails = prismaAuth

    const options = {hour: "numeric", minute: "numeric", year: 'numeric', month: 'long', day: 'numeric' };
    const date = event.toLocaleString('en-GB', options)



    
    const [updatedLikes, setUpdatedLikes] = useState(data[0].totalLikes)
    const [updatedPost, setUpdatedPost] = useState(data)
    const [editingPostMode, setEditingPostMode] = useState(false)

 

    const childtoParent = async (editFormData) => {

        const res = await axios.put(`/api/posts/${data[0].id}`, {
            title: editFormData.title,
            content: editFormData.content,
            category: editFormData.category
        })

        const updatePostsRes = await fetch(`/api/posts/${data[0].id}`);
        const updatePosts = await updatePostsRes.json();

        setUpdatedPost(updatePosts)
        setEditingPostMode(false)
    }

    const handleLike = async () => {
        const res = await axios.put(`/api/posts/${data[0].id}/likes`)

        const updatePostsRes = await fetch(`/api/posts/${data[0].id}`);
        const updatePosts = await updatePostsRes.json();
        setUpdatedPost(updatePosts)
    }


    const handleDelete = async () => {
        const res = await axios.delete(`/api/posts/${data[0].id}`)
        console.log(res)

        r.push("/")
    }

    const clickedMenuItem = (e) => {
        if(e == 'edit'){
            setEditingPostMode(true)
        } else if(e == 'delete'){
            handleDelete()
        }
    }


    return(
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <NavBar onClickSignIn={()=>setForm("signIn")} onClickSignOut={()=>setForm("signOut")} />
            <main>
                <img onClick={()=>{r.push("/")}} src="/close.png" className='w-5 mb-5 cursor-pointer'></img>

                {!editingPostMode && updatedPost.map((o,i)=>(
                    <PostPreview postData={o} keyId={i} onClick={()=>{r.push(`/post/${o.id}`)}} date={date} addHeart={()=>handleLike(o.id)} preview={false} postUserDetails={postUserDetails.id} sessionUserDetails={sessionUserDetails.id} onClickEdit={(e)=>{clickedMenuItem(e)}} />
                ))}

                {editingPostMode && updatedPost.map((o,i)=>(
                    <EditingPost postData={o} childParent={childtoParent} date={date} addHeart={()=>handleLike(o.id)} preview={false} cancelButton={()=>{setEditingPostMode(false)}}/>
                ))}

                <Comment commentsData={comments} postData={data[0]} postUserDetails={postUserDetails.id} sessionUserDetails={sessionUserDetails.id}></Comment>

            </main>
        </>
    )
}

export async function getServerSideProps(context){
    const singlePost = context.query.post
    const session = await getServerSession(context.req, context.res, authOptions)
    if(!session){
        return{
            redirect:{
                destination: "/api/auth/signin",
                permanent:false
            }
        }
    }

    const prismaUser = await prisma.user.findUnique({
        where: { email: session.user.email }
    })

    const getSinglePost = await prisma.post.findMany({
        where:{
            id: Number(singlePost)
        },
        include: {
            user: true,
            comments: true
          }
      })
    const allComments = await prisma.comment.findMany({
        where:{
            postBelongingId: Number(singlePost)
        },
        include: {
            user: true
          }
    })
  
    return{
      props:{
        data: JSON.parse(JSON.stringify(getSinglePost)),
        comments: JSON.parse(JSON.stringify(allComments)),
        prismaAuth: JSON.parse(JSON.stringify(prismaUser))
      }
    }
  }